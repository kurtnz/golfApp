(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GolfApp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function create(){var e=new base.HandlebarsEnvironment;return Utils.extend(e,base),e.SafeString=_SafeString2["default"],e.Exception=_Exception2["default"],e.Utils=Utils,e.escapeExpression=Utils.escapeExpression,e.VM=runtime,e.template=function(r){return runtime.template(r,e)},e}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0;var _import=require("./handlebars/base"),base=_interopRequireWildcard(_import),_SafeString=require("./handlebars/safe-string"),_SafeString2=_interopRequireWildcard(_SafeString),_Exception=require("./handlebars/exception"),_Exception2=_interopRequireWildcard(_Exception),_import2=require("./handlebars/utils"),Utils=_interopRequireWildcard(_import2),_import3=require("./handlebars/runtime"),runtime=_interopRequireWildcard(_import3),_noConflict=require("./handlebars/no-conflict"),_noConflict2=_interopRequireWildcard(_noConflict),inst=create();inst.create=create,_noConflict2["default"](inst),inst["default"]=inst,exports["default"]=inst,module.exports=exports["default"];

},{"./handlebars/base":2,"./handlebars/exception":3,"./handlebars/no-conflict":4,"./handlebars/runtime":5,"./handlebars/safe-string":6,"./handlebars/utils":7}],2:[function(require,module,exports){
"use strict";function HandlebarsEnvironment(e,t){this.helpers=e||{},this.partials=t||{},registerDefaultHelpers(this)}function registerDefaultHelpers(e){e.registerHelper("helperMissing",function(){if(1===arguments.length)return void 0;throw new _Exception2["default"]('Missing helper: "'+arguments[arguments.length-1].name+'"')}),e.registerHelper("blockHelperMissing",function(t,r){var i=r.inverse,n=r.fn;if(t===!0)return n(this);if(t===!1||null==t)return i(this);if(isArray(t))return t.length>0?(r.ids&&(r.ids=[r.name]),e.helpers.each(t,r)):i(this);if(r.data&&r.ids){var a=createFrame(r.data);a.contextPath=Utils.appendContextPath(r.data.contextPath,r.name),r={data:a}}return n(t,r)}),e.registerHelper("each",function(e,t){function r(t,r,n){l&&(l.key=t,l.index=r,l.first=0===r,l.last=!!n,o&&(l.contextPath=o+t)),s+=i(e[t],{data:l,blockParams:Utils.blockParams([e[t],t],[o+t,null])})}if(!t)throw new _Exception2["default"]("Must pass iterator to #each");var i=t.fn,n=t.inverse,a=0,s="",l=void 0,o=void 0;if(t.data&&t.ids&&(o=Utils.appendContextPath(t.data.contextPath,t.ids[0])+"."),isFunction(e)&&(e=e.call(this)),t.data&&(l=createFrame(t.data)),e&&"object"==typeof e)if(isArray(e))for(var c=e.length;c>a;a++)r(a,a,a===e.length-1);else{var p=void 0;for(var u in e)e.hasOwnProperty(u)&&(p&&r(p,a-1),p=u,a++);p&&r(p,a-1,!0)}return 0===a&&(s=n(this)),s}),e.registerHelper("if",function(e,t){return isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||Utils.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,r){return e.helpers["if"].call(this,t,{fn:r.inverse,inverse:r.fn,hash:r.hash})}),e.registerHelper("with",function(e,t){isFunction(e)&&(e=e.call(this));var r=t.fn;if(Utils.isEmpty(e))return t.inverse(this);if(t.data&&t.ids){var i=createFrame(t.data);i.contextPath=Utils.appendContextPath(t.data.contextPath,t.ids[0]),t={data:i}}return r(e,t)}),e.registerHelper("log",function(t,r){var i=r.data&&null!=r.data.level?parseInt(r.data.level,10):1;e.log(i,t)}),e.registerHelper("lookup",function(e,t){return e&&e[t]})}function createFrame(e){var t=Utils.extend({},e);return t._parent=e,t}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0,exports.HandlebarsEnvironment=HandlebarsEnvironment,exports.createFrame=createFrame;var _import=require("./utils"),Utils=_interopRequireWildcard(_import),_Exception=require("./exception"),_Exception2=_interopRequireWildcard(_Exception),VERSION="3.0.1";exports.VERSION=VERSION;var COMPILER_REVISION=6;exports.COMPILER_REVISION=COMPILER_REVISION;var REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1"};exports.REVISION_CHANGES=REVISION_CHANGES;var isArray=Utils.isArray,isFunction=Utils.isFunction,toString=Utils.toString,objectType="[object Object]";HandlebarsEnvironment.prototype={constructor:HandlebarsEnvironment,logger:logger,log:log,registerHelper:function(e,t){if(toString.call(e)===objectType){if(t)throw new _Exception2["default"]("Arg not supported with multiple helpers");Utils.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(toString.call(e)===objectType)Utils.extend(this.partials,e);else{if("undefined"==typeof t)throw new _Exception2["default"]("Attempting to register a partial as undefined");this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]}};var logger={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:1,log:function(e,t){if("undefined"!=typeof console&&logger.level<=e){var r=logger.methodMap[e];(console[r]||console.log).call(console,t)}}};exports.logger=logger;var log=logger.log;exports.log=log;

},{"./exception":3,"./utils":7}],3:[function(require,module,exports){
"use strict";function Exception(r,e){var o=e&&e.loc,t=void 0,s=void 0;o&&(t=o.start.line,s=o.start.column,r+=" - "+t+":"+s);for(var c=Error.prototype.constructor.call(this,r),i=0;i<errorProps.length;i++)this[errorProps[i]]=c[errorProps[i]];Error.captureStackTrace&&Error.captureStackTrace(this,Exception),o&&(this.lineNumber=t,this.column=s)}exports.__esModule=!0;var errorProps=["description","fileName","lineNumber","message","name","number","stack"];Exception.prototype=new Error,exports["default"]=Exception,module.exports=exports["default"];

},{}],4:[function(require,module,exports){
(function (global){
"use strict";exports.__esModule=!0,exports["default"]=function(e){var o="undefined"!=typeof global?global:window,l=o.Handlebars;e.noConflict=function(){o.Handlebars===e&&(o.Handlebars=l)}},module.exports=exports["default"];


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
"use strict";function checkRevision(e){var r=e&&e[0]||1,t=_COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;if(r!==t){if(t>r){var a=_COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[t],n=_COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[r];throw new _Exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+a+") or downgrade your runtime to an older version ("+n+").")}throw new _Exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function template(e,r){function t(t,a,n){n.hash&&(a=Utils.extend({},a,n.hash)),t=r.VM.resolvePartial.call(this,t,a,n);var i=r.VM.invokePartial.call(this,t,a,n);if(null==i&&r.compile&&(n.partials[n.name]=r.compile(t,e.compilerOptions,r),i=n.partials[n.name](a,n)),null!=i){if(n.indent){for(var o=i.split("\n"),l=0,p=o.length;p>l&&(o[l]||l+1!==p);l++)o[l]=n.indent+o[l];i=o.join("\n")}return i}throw new _Exception2["default"]("The partial "+n.name+" could not be compiled when running in runtime-only mode")}function a(r){var t=void 0===arguments[1]?{}:arguments[1],i=t.data;a._setup(t),!t.partial&&e.useData&&(i=initData(r,i));var o=void 0,l=e.useBlockParams?[]:void 0;return e.useDepths&&(o=t.depths?[r].concat(t.depths):[r]),e.main.call(n,r,n.helpers,n.partials,i,l,o)}if(!r)throw new _Exception2["default"]("No environment passed to template");if(!e||!e.main)throw new _Exception2["default"]("Unknown template object: "+typeof e);r.VM.checkRevision(e.compiler);var n={strict:function(e,r){if(!(r in e))throw new _Exception2["default"]('"'+r+'" not defined in '+e);return e[r]},lookup:function(e,r){for(var t=e.length,a=0;t>a;a++)if(e[a]&&null!=e[a][r])return e[a][r]},lambda:function(e,r){return"function"==typeof e?e.call(r):e},escapeExpression:Utils.escapeExpression,invokePartial:t,fn:function(r){return e[r]},programs:[],program:function(e,r,t,a,n){var i=this.programs[e],o=this.fn(e);return r||n||a||t?i=wrapProgram(this,e,o,r,t,a,n):i||(i=this.programs[e]=wrapProgram(this,e,o)),i},data:function(e,r){for(;e&&r--;)e=e._parent;return e},merge:function(e,r){var t=e||r;return e&&r&&e!==r&&(t=Utils.extend({},r,e)),t},noop:r.VM.noop,compilerInfo:e.compiler};return a.isTop=!0,a._setup=function(t){t.partial?(n.helpers=t.helpers,n.partials=t.partials):(n.helpers=n.merge(t.helpers,r.helpers),e.usePartial&&(n.partials=n.merge(t.partials,r.partials)))},a._child=function(r,t,a,i){if(e.useBlockParams&&!a)throw new _Exception2["default"]("must pass block params");if(e.useDepths&&!i)throw new _Exception2["default"]("must pass parent depths");return wrapProgram(n,r,e[r],t,0,a,i)},a}function wrapProgram(e,r,t,a,n,i,o){function l(r){var n=void 0===arguments[1]?{}:arguments[1];return t.call(e,r,e.helpers,e.partials,n.data||a,i&&[n.blockParams].concat(i),o&&[r].concat(o))}return l.program=r,l.depth=o?o.length:0,l.blockParams=n||0,l}function resolvePartial(e,r,t){return e?e.call||t.name||(t.name=e,e=t.partials[e]):e=t.partials[t.name],e}function invokePartial(e,r,t){if(t.partial=!0,void 0===e)throw new _Exception2["default"]("The partial "+t.name+" could not be found");return e instanceof Function?e(r,t):void 0}function noop(){return""}function initData(e,r){return r&&"root"in r||(r=r?_COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(r):{},r.root=e),r}var _interopRequireWildcard=function(e){return e&&e.__esModule?e:{"default":e}};exports.__esModule=!0,exports.checkRevision=checkRevision,exports.template=template,exports.wrapProgram=wrapProgram,exports.resolvePartial=resolvePartial,exports.invokePartial=invokePartial,exports.noop=noop;var _import=require("./utils"),Utils=_interopRequireWildcard(_import),_Exception=require("./exception"),_Exception2=_interopRequireWildcard(_Exception),_COMPILER_REVISION$REVISION_CHANGES$createFrame=require("./base");

},{"./base":2,"./exception":3,"./utils":7}],6:[function(require,module,exports){
"use strict";function SafeString(t){this.string=t}exports.__esModule=!0,SafeString.prototype.toString=SafeString.prototype.toHTML=function(){return""+this.string},exports["default"]=SafeString,module.exports=exports["default"];

},{}],7:[function(require,module,exports){
"use strict";function escapeChar(t){return escape[t]}function extend(t){for(var r=1;r<arguments.length;r++)for(var n in arguments[r])Object.prototype.hasOwnProperty.call(arguments[r],n)&&(t[n]=arguments[r][n]);return t}function indexOf(t,r){for(var n=0,e=t.length;e>n;n++)if(t[n]===r)return n;return-1}function escapeExpression(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return possible.test(t)?t.replace(badChars,escapeChar):t}function isEmpty(t){return t||0===t?isArray(t)&&0===t.length?!0:!1:!0}function blockParams(t,r){return t.path=r,t}function appendContextPath(t,r){return(t?t+".":"")+r}exports.__esModule=!0,exports.extend=extend,exports.indexOf=indexOf,exports.escapeExpression=escapeExpression,exports.isEmpty=isEmpty,exports.blockParams=blockParams,exports.appendContextPath=appendContextPath;var escape={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},badChars=/[&<>"'`]/g,possible=/[&<>"'`]/,toString=Object.prototype.toString;exports.toString=toString;var isFunction=function(t){return"function"==typeof t};isFunction(/x/)&&(exports.isFunction=isFunction=function(t){return"function"==typeof t&&"[object Function]"===toString.call(t)});var isFunction;exports.isFunction=isFunction;var isArray=Array.isArray||function(t){return t&&"object"==typeof t?"[object Array]"===toString.call(t):!1};exports.isArray=isArray;

},{}],8:[function(require,module,exports){
module.exports=require("./dist/cjs/handlebars.runtime")["default"];

},{"./dist/cjs/handlebars.runtime":1}],9:[function(require,module,exports){
module.exports=require("handlebars/runtime")["default"];

},{"handlebars/runtime":8}],10:[function(require,module,exports){
"use strict";var GolfApp=new Marionette.Application;module.exports=GolfApp;

},{}],11:[function(require,module,exports){
"use strict";var CourseHoleModel=require("../models/coursehole"),CourseHolesCollection=Backbone.Collection.extend({model:CourseHoleModel,initialize:function(e,o){this.url="/api/v1/course_hole/"+o.id}});module.exports=CourseHolesCollection;

},{"../models/coursehole":18}],12:[function(require,module,exports){
"use strict";var CoursesCollection=Backbone.Collection.extend({url:"/api/v1/courses"});module.exports=CoursesCollection;

},{}],13:[function(require,module,exports){
"use strict";var CourseHoleModel=require("../models/coursehole"),HolesCollection=Backbone.Collection.extend({model:CourseHoleModel});module.exports=HolesCollection;

},{"../models/coursehole":18}],14:[function(require,module,exports){
"use strict";var HoleModel=require("../models/hole"),ScoreCollection=Backbone.Collection.extend({model:HoleModel,url:"/api/v1/holes",initialize:function(e,o){}});module.exports=ScoreCollection;

},{"../models/hole":19}],15:[function(require,module,exports){
"use strict";var LoginView=require("./views/login"),HomeView=require("./views/home"),Courses=require("./views/courses"),Course=require("./views/course"),ScoreCard=require("./views/scorecard"),Score=require("./views/score"),CourseModel=require("./models/course"),SingleHoleModel=require("./models/singlehole"),CoursesCollection=require("./collections/courses"),CourseHolesCollection=require("./collections/courseholes"),ScoreCollection=require("./collections/score"),controller={login:function(){var e=new LoginView;app.appRegion.show(e)},home:function(){var e=new HomeView;app.appRegion.show(e)},showCourses:function(){var e=new CoursesCollection,o=e.fetch();o.done(function(){var o=new Courses({collection:e});app.appRegion.show(o)})},showScorecard:function(){var e=window.roundModel.get("course_id"),o=window.roundModel.get("id"),r=new CourseModel({url:e}),n=new CourseHolesCollection(null,{id:e});$.when(r.fetch(),n.fetch()).done(function(){var e=n.length,i=new Course({model:r,collection:n}),c=new ScoreCollection;$.when(c.fetch({data:{roundId:o,numHoles:e}})).done(function(){var e=new ScoreCard({collection:c});app.appRegion.show(i),app.scoreRegion.reset().show(e,{forceShow:!0})})})},editScore:function(e){var o=new SingleHoleModel({id:e});$.when(o.fetch()).done(function(){var e=new Score({model:o});app.appRegion.show(e)})}};module.exports=controller;

},{"./collections/courseholes":11,"./collections/courses":12,"./collections/score":14,"./models/course":17,"./models/singlehole":22,"./views/course":24,"./views/courses":26,"./views/home":28,"./views/login":29,"./views/score":30,"./views/scorecard":31}],16:[function(require,module,exports){
"use strict";window.app=require("./app");var router=require("./router");app.addRegions({appRegion:"#app",scoreRegion:"#course-score"}),jQuery.ajaxSetup({cache:!1,beforeSend:function(e){console.log("check login token");var o=sessionStorage.getItem("golf_auth_token");o&&e.setRequestHeader("JWT-Authorization",o)},statusCode:{401:function(){console.log("login error - show login"),vent.trigger("showLogin")}}}),app.on("start",function(){window.vent=new Backbone.Wreqr.EventAggregator,vent.on("showLogin",function(){router.navigate("/login",{trigger:!0})}),vent.on("showHome",function(){router.navigate("",{trigger:!0})}),vent.on("showCourses",function(){router.navigate("/courses",{trigger:!0})}),vent.on("showScorecard",function(){var e=window.roundModel.get("id");router.navigate("/scorecard/"+e,{trigger:!0})}),vent.on("editScore",function(e){router.navigate("/hole/"+e,{trigger:!0})}),Backbone.History.started||Backbone.history.start({pushState:!0})}),app.start();

},{"./app":10,"./router":23}],17:[function(require,module,exports){
"use strict";var HolesCollection=require("../collections/holes"),CourseModel=Backbone.Model.extend({url:function(){return this.instanceUrl},initialize:function(e){this.url="/api/v1/course/"+e.url,this.listenTo(this,"sync",this.setCollection)},setCollection:function(){var e=this.get("holes");e&&(this.holes=new HolesCollection(e),this.unset("holes"))}});module.exports=CourseModel;

},{"../collections/holes":13}],18:[function(require,module,exports){
"use strict";var CourseHoleModel=Backbone.Model.extend();module.exports=CourseHoleModel;

},{}],19:[function(require,module,exports){
"use strict";var HoleModel=Backbone.Model.extend({urlRoot:"/api/v1/hole",url:function(){return this.urlRoot},defaults:{score:0,putts:0,fairways:0,bunkers:0,club:""},initialize:function(){this.listenTo(this,"change",function(e){window.vent.trigger("showScorecard")})}});module.exports=HoleModel;

},{}],20:[function(require,module,exports){
"use strict";var LoginModel=Backbone.Model.extend({url:"/api/v1/login.json"});module.exports=LoginModel;

},{}],21:[function(require,module,exports){
"use strict";var RoundModel=Backbone.Model.extend({url:"/api/v1/round"});module.exports=RoundModel;

},{}],22:[function(require,module,exports){
"use strict";var SingleHoleModel=Backbone.Model.extend({urlRoot:"/api/v1/hole"});module.exports=SingleHoleModel;

},{}],23:[function(require,module,exports){
"use strict";var controller=require("./controller");window.Router=Backbone.Marionette.AppRouter.extend({appRoutes:{login:"login",courses:"showCourses","scorecard/:roundId":"showScorecard","hole/:holeId":"editScore","":"home"}});var router=new Router({controller:controller});module.exports=router;

},{"./controller":15}],24:[function(require,module,exports){
"use strict";var CourseHoleView=require("../views/coursehole"),Course=Backbone.Marionette.CompositeView.extend({template:require("./templates/course-details.hbs"),childView:CourseHoleView,childViewContainer:".course__holes",initialize:function(){this.listenTo(this.model,"sync",this.render)}});module.exports=Course;

},{"../views/coursehole":25,"./templates/course-details.hbs":33}],25:[function(require,module,exports){
"use strict";var CourseHoleView=Backbone.Marionette.ItemView.extend({template:require("./templates/course-hole.hbs"),tagName:"ul",className:"course__hole"});module.exports=CourseHoleView;

},{"./templates/course-hole.hbs":34}],26:[function(require,module,exports){
"use strict";var CourseView=require("../views/courseview"),Courses=Backbone.Marionette.CollectionView.extend({childView:CourseView});module.exports=Courses;

},{"../views/courseview":27}],27:[function(require,module,exports){
"use strict";var CourseView=Backbone.Marionette.ItemView.extend({template:require("./templates/course.hbs"),events:{"click a":"selectCourse"},selectCourse:function(e){e.preventDefault();var t=this.model.get("id");window.roundModel.set({course_id:t}),window.roundModel.save(null,{success:function(e,t,o){e.set({id:t}),window.vent.trigger("showScorecard")}})}});module.exports=CourseView;

},{"./templates/course.hbs":35}],28:[function(require,module,exports){
"use strict";var RoundModel=require("../models/round"),HomeView=Backbone.Marionette.ItemView.extend({template:require("./templates/home.hbs"),events:{"click .new-round":"newRound"},newRound:function(e){e.preventDefault(),window.roundModel=new RoundModel,window.vent.trigger("showCourses")}});module.exports=HomeView;

},{"../models/round":21,"./templates/home.hbs":36}],29:[function(require,module,exports){
"use strict";var LoginModel=require("../models/login.js"),Login=Backbone.Marionette.ItemView.extend({template:require("./templates/login.hbs"),tagName:"form",events:{submit:"submitHandler"},submitHandler:function(e){e.preventDefault();var t=this.$el.serializeArray(),o={};$.map(t,function(e,t){o[e.name]=e.value});var n=new LoginModel(o);n.save(null,{success:function(e){var t=e.get("token");sessionStorage.setItem("golf_auth_token",t),vent.trigger("showHome")},error:function(e){console.log("Login error")}})}});module.exports=Login;

},{"../models/login.js":20,"./templates/login.hbs":37}],30:[function(require,module,exports){
"use strict";var Score=Backbone.Marionette.ItemView.extend({template:require("./templates/score.hbs"),events:{"click button":"saveScore"},onRender:function(){},getPosition:function(){function e(e,n){var t=new google.maps.LatLng(e,n),o={center:t,zoom:12},i=new google.maps.Map(document.getElementById("map-canvas"),o);new google.maps.Marker({position:t,map:i})}navigator.geolocation.getCurrentPosition(function(n){e(n.coords.latitude,n.coords.longitude)},function(){console.log("error")},{enableHighAccuracy:!0,timeout:1e4,maximumAge:0})},saveScore:function(){var e=this.$el.find('input[name="score"]').val(),n=this.$el.find('input[name="putts"]').val(),t=this.$el.find('input[name="fairways"]').val(),o=this.$el.find('input[name="bunkers"]').val(),i=this.$el.find('input[name="club"]').val();this.model.save({score:e,putts:n,fairways:t,bunkers:o,club:i}),window.vent.trigger("showScorecard")}});module.exports=Score;

},{"./templates/score.hbs":39}],31:[function(require,module,exports){
"use strict";var ScoreHole=require("../views/scorehole"),ScoreCard=Backbone.Marionette.CollectionView.extend({childView:ScoreHole,tagName:"ul"});module.exports=ScoreCard;

},{"../views/scorehole":32}],32:[function(require,module,exports){
"use strict";var ScoreHole=Backbone.Marionette.ItemView.extend({template:require("./templates/score-hole.hbs"),tagName:"li",className:"course__score",events:{"click a":"editScore"},editScore:function(e){e.preventDefault();var t=this.model.get("id");window.vent.trigger("editScore",t)}});module.exports=ScoreHole;

},{"./templates/score-hole.hbs":38}],33:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,l,i,n){var s;return"<h1>"+this.escapeExpression((s=null!=(s=l.name||(null!=e?e.name:e))?s:l.helperMissing,"function"==typeof s?s.call(e,{name:"name",hash:{},data:n}):s))+'</h1>\n<ul class="course__head">\n    <li>Hole</li>\n    <li>White</li>\n    <li>Red</li>\n    <li>Par</li>\n    <li>Score</li>\n</ul>\n<div class="course__holes"></div>\n<div id="course-score" class="course__scores"></div>'},useData:!0});

},{"hbsfy/runtime":9}],34:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,l,a,n){var i,t=l.helperMissing,r="function",s=this.escapeExpression;return"<li>"+s((i=null!=(i=l.hole_num||(null!=e?e.hole_num:e))?i:t,typeof i===r?i.call(e,{name:"hole_num",hash:{},data:n}):i))+"</li>\n<li>"+s((i=null!=(i=l.white_distance||(null!=e?e.white_distance:e))?i:t,typeof i===r?i.call(e,{name:"white_distance",hash:{},data:n}):i))+"</li>\n<li>"+s((i=null!=(i=l.red_distance||(null!=e?e.red_distance:e))?i:t,typeof i===r?i.call(e,{name:"red_distance",hash:{},data:n}):i))+"</li>\n<li>"+s((i=null!=(i=l.white_par||(null!=e?e.white_par:e))?i:t,typeof i===r?i.call(e,{name:"white_par",hash:{},data:n}):i))+"</li>"},useData:!0});

},{"hbsfy/runtime":9}],35:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,a,n,r){var l;return'<a href="">'+this.escapeExpression((l=null!=(l=a.name||(null!=e?e.name:e))?l:a.helperMissing,"function"==typeof l?l.call(e,{name:"name",hash:{},data:r}):l))+"</a>"},useData:!0});

},{"hbsfy/runtime":9}],36:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,r,a,n){return'<a href="#" class="new-round">New round</a>'},useData:!0});

},{"hbsfy/runtime":9}],37:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,n,r,a){return'<fieldset>\n    <div class="form_row">\n        <label for="username">Username</label>\n        <input type="text" name="username" id="username">\n    </div>\n    <div class="form_row">\n        <label for="password">Password</label>\n        <input type="password" name="password" id="password">\n    </div>\n    <div class="form_row">\n        <button type="submit">Submit</button>\n    </div>\n</fieldset>'},useData:!0});

},{"hbsfy/runtime":9}],38:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,l,e,n){var s,t=l.helperMissing,u="function",r=this.escapeExpression;return'<a href="#">'+r((s=null!=(s=l.score||(null!=a?a.score:a))?s:t,typeof s===u?s.call(a,{name:"score",hash:{},data:n}):s))+"</a>\n<!--"+r((s=null!=(s=l.putts||(null!=a?a.putts:a))?s:t,typeof s===u?s.call(a,{name:"putts",hash:{},data:n}):s))+"\n"+r((s=null!=(s=l.fairways||(null!=a?a.fairways:a))?s:t,typeof s===u?s.call(a,{name:"fairways",hash:{},data:n}):s))+"\n"+r((s=null!=(s=l.bunkers||(null!=a?a.bunkers:a))?s:t,typeof s===u?s.call(a,{name:"bunkers",hash:{},data:n}):s))+"\n"+r((s=null!=(s=l.club||(null!=a?a.club:a))?s:t,typeof s===u?s.call(a,{name:"club",hash:{},data:n}):s))+"-->"},useData:!0});

},{"hbsfy/runtime":9}],39:[function(require,module,exports){
var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,e,t,n){var l,u=e.helperMissing,s="function",r=this.escapeExpression;return'Score: <input type="text" name="score" value="'+r((l=null!=(l=e.score||(null!=a?a.score:a))?l:u,typeof l===s?l.call(a,{name:"score",hash:{},data:n}):l))+'"><br>\nPutts: <input type="text" name="putts" value="'+r((l=null!=(l=e.putts||(null!=a?a.putts:a))?l:u,typeof l===s?l.call(a,{name:"putts",hash:{},data:n}):l))+'"><br>\nFairways: <input type="text" name="fairways" value="'+r((l=null!=(l=e.fairways||(null!=a?a.fairways:a))?l:u,typeof l===s?l.call(a,{name:"fairways",hash:{},data:n}):l))+'"><br>\nBunkers: <input type="text" name="bunkers" value="'+r((l=null!=(l=e.bunkers||(null!=a?a.bunkers:a))?l:u,typeof l===s?l.call(a,{name:"bunkers",hash:{},data:n}):l))+'"><br>\nClub: <input type="text" name="club" value="'+r((l=null!=(l=e.club||(null!=a?a.club:a))?l:u,typeof l===s?l.call(a,{name:"club",hash:{},data:n}):l))+'">\n\n<div id="map-canvas"></div>\n\n<button>Save</button>'},useData:!0});

},{"hbsfy/runtime":9}]},{},[16])(16)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
